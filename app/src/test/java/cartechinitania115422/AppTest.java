/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package cartechinitania115422;

import org.junit.jupiter.api.Test;

import java.awt.Point;
import java.awt.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Line;
import javafx.scene.shape.Polygon;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    private App app= new App();
    private Area area= new Area();
    private Interprete interprete= new Interprete(area, "logoProgram.logo");

    @Test void appAggiungiLineaTesting() {
        try{
            interprete.interpreta();
        } catch (Exception ex)
        {
            System.out.println(ex.getMessage());
        }
        
        Linea linea;
        if(area.getPoligoni().size()!=0)
        linea= area.getPoligoni().get(0).getLinea(0); 
        else if (area.getSpezzate().size()!= 0)
        linea= area.getSpezzate().get(0).getLinea(0); 
        else 
            throw new AssertionError("Non sono presenti poligoni o spezzate nel file logo!");
        Line line= app.aggiungiLinea(linea);
        assertEquals(line.getStartX(), linea.getEstremo1().getX());
        assertEquals(line.getEndX(), linea.getEstremo2().getX()); 
        assertEquals(line.getStartY(), linea.getEstremo1().getY()); 
        assertEquals(line.getEndY(), linea.getEstremo2().getY()); 
    }


    @Test void appAggiungiPoligonoTesting() {
        try{
            interprete.interpreta();
        } catch (Exception ex)
        {
            System.out.println(ex.getMessage());
        }

        Color colore;
        Poligono poligono= area.getPoligoni().get(0);
        Polygon polygon= app.aggiungiPoligono(poligono);
        colore= poligono.getColore();
    
       assertEquals(polygon.getFill(), Paint.valueOf(String.format("#%02x%02x%02x", 
                    colore.getRed(), colore.getGreen(), colore.getBlue())));

                    int i= 0;
       for (Linea l1: poligono.linee)
            {

                double x = l1.getEstremo1().getX();
                double y = l1.getEstremo1().getY();
    
                assertEquals(polygon.getPoints().get(i++), x);
                assertEquals(polygon.getPoints().get(i++), new Area().getAltezza()-y);

            }
    }

    @Test 
    void areaIsLineaTesting()
    {
        try{
            interprete.interpreta();
        } catch (Exception ex)
        {
            System.out.println(ex.getMessage());
        }

        if (area.getPoligoni().size()!= 0)
        {
            for (Poligono poligono: area.getPoligoni())
            {
                for (Linea linea: poligono.getLinee())
                {
                    assertTrue(area.isLinea(linea));
                }
            }
        } else if (area.getSpezzate().size() != 0)
        {
            for (Spezzata spezzata: area.getSpezzate())
            {
                for (Linea linea: spezzata.getLinee())
                {
                    assertTrue(area.isLinea(linea));
                }
            }
        } else 
                throw new AssertionError ("Non sono presenti poligoni o spezzate nel file Logo!");


    } 

    @Test void lineaCompareToTesting()
    {
        //Le due linee sono identiche (sovrapposte e di stessa lunghezza) tranne per il colore che per lo spessore
        Linea linea= new Linea(new Point(100, 100), new Point(200, 100), 1, Color.BLACK);
        Linea linea2= new Linea(new Point(100, 100), new Point(200, 100), 2, Color.RED);
        //il metodo compareTo (Linea linea) restituisce quindi 0 (in caso contrario -1)
        assertTrue(linea.compareTo(linea2)== 0);  
    } 

    @Test void spezzataAddLineaTesting()
    {
        Linea linea= new Linea(new Point(100, 100), new Point(200, 100), 1, Color.BLACK);
        Spezzata spezzata= new Spezzata();
        //aggiungo la prima linea
        assertTrue(spezzata.addLinea(linea));
        linea= new Linea(new Point(800, 700), new Point(1000, 500), 1, Color.BLACK);
        //La nuova linea non fa parte della Spezzata
        assertFalse(spezzata.addLinea(linea));
        linea= new Linea(new Point(100, 100), new Point(300, 100), 5, Color.RED);
        //La nuova linea fa parte della spezzata nonostante lo spessore ed il colore diversi.
        assertTrue(spezzata.addLinea(linea));
    }

    @Test void spezzataCreaPoligonoTesting()
    {
        Linea linea= new Linea(new Point(100, 100), new Point(200, 100), 1, Color.BLACK);
        Spezzata spezzata = new Spezzata();
        spezzata.addLinea(linea);
        linea= new Linea(new Point(200, 100), new Point(200, 200), 1, Color.BLACK);
        spezzata.addLinea(linea);
        linea= new Linea(new Point(200, 200), new Point(100, 200), 1, Color.BLACK);
        spezzata.addLinea(linea);
        linea= new Linea(new Point(100, 200), new Point(100, 100), 1, Color.BLACK);
        //La linea chiude la spezzata.
        assertTrue(spezzata.creaPoligono(linea)!=null);
        linea= new Linea(new Point(100, 200), new Point(700, 100), 1, Color.BLACK);
        //La linea non chiude la spezzata.
        assertFalse(spezzata.creaPoligono(linea)!= null);

    }


 







}
